type ActiveReflectionValidation {
  errors: [String]
  valid: Boolean
}

type ActiveReflectionValidator {
  absence: Boolean
  exclusion: [String]
  inclusion: [String]
  max_length: Int
  min_length: Int
  presence: Boolean
  uniqueness: Boolean
  with_format: String
  without_format: String
}

type Activity implements Node {
  id: ID!

  # Meta hash for this activity.
  meta: Hash!

  # Object for this activity.
  object: ActivityObjectUnion!

  # Actor for this activity.
  user: User!

  # Activity committed here.
  verb: String!
}

# The connection type for Activity.
type ActivityConnection {
  # A list of edges.
  edges: [ActivityEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ActivityEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Activity
}

enum ActivityFilterEnum {
  # Spotlight
  SPOTLIGHT
}

enum ActivityObjectEnum {
  # Articles
  ARTICLE

  # Collections
  COLLECTION

  # Users
  USER
}

union ActivityObjectUnion = Article | Collection | User

type Article implements ReclineInterface, Node {
  # Fetch the content model for the given object.
  _model: ReclineModel
  author: User
  byline: String
  commentsCount: String
  contents: [ContentType]
  created: String
  id: ID!
  image: ImageAttachment
  likesCount: String
  sharesCount: String
  slug: String!
  summary: String
  tags: [Tag]
  title: String!
}

# The connection type for Article.
type ArticleConnection {
  # A list of edges.
  edges: [ArticleEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ArticleEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Article
}

type Asset {
  description: String
  image_url(width: Int, height: Int, format: String, quality: String, focus: String, fit: String, fl: String): String!
}

type Brand implements Node {
  id: ID!
  slug: String!
  title: String!
}

type ButtonEntry implements Node {
  contents: String!
  id: ID!
  url: String
}

type Collection implements Node {
  id: ID!
  image(version: String = "original"): ImageAttachment
  title: String!
  url: String!

  # Creator of this collection.
  user: User!
}

enum ContentStatusEnum {
  # Draft
  DRAFT

  # Published
  PUBLISHED
}

type ContentType {
  meta: Hash
  object: ContentUnion!
  status: ContentStatusEnum!
  title: String!
}

union ContentUnion = ButtonEntry | Image | TextEntry

type Feed {
  activities(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
    id: [ID]
    on: [ActivityObjectEnum]
    order: Order
  ): ActivityConnection
  articles(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
    id: [ID]
  ): ArticleConnection
  format: FeedFormats!
  slug: String!
}

enum FeedFormats {
  # Flat Feed
  FLAT

  # Aggregate Feed
  AGGREGATE

  # Message Feed
  MESSAGE
}

scalar Hash

type Image implements Node {
  alt: String
  id: ID!
  version(name: String!): ImageVersion
}

type ImageAttachment {
  alt: String
  version(name: String!): ImageVersion
}

type ImageVersion {
  height: Int
  mime_type: String
  size: Int!
  url: String!
  width: Int
}

type Mutation {
  # Updates fields on a model
  updateModel(input: UpdateModelInput!): UpdateModelPayload
}

# An object with an ID.
interface Node {
  # ID of the object.
  id: ID!
}

enum Order {
  # Sorted by recent order
  RECENT

  # Sorted by most popular
  POPULAR
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

type Product implements Node {
  brand: Brand
  category: Tag
  id: ID!
  images: [Image]
  purchaseLink: ProductLink
  rating: Float!
  relatedProducts: [Product]
  reviews(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
    order: Order = POPULAR
  ): ReviewConnectionType
  reviewsCount: Int!
  slug: String!
  summary: String
  tags: [Tag]
  text: String
  title: String!
  traits: [ProductTrait]
}

# The connection type for Product.
type ProductConnection {
  # A list of edges.
  edges: [ProductEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ProductEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Product
}

type ProductLink implements Node {
  id: ID!
  is_featured: Boolean
  is_sponsored: Boolean
  price: Float
  url: String!
}

enum ProductScope {
  # Sponsored
  SPONSORED

  # Discounted
  DISCOUNTED
}

type ProductTrait implements Node {
  group: ProductTraitGroup
  id: ID!
  numerary: Int
  text: String
  unit: String
}

type ProductTraitGroup implements Node {
  id: ID!
  name: String
  prefix: String
  suffix: String
  units: Hash
}

type Query {
  activities(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
    id: [ID]
    filters: [ActivityFilterEnum]
    order: Order
    type: [ActivityObjectEnum]
  ): ActivityConnection
  articles(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
    id: [ID]
  ): ArticleConnection
  categories(scopes: [TagScope]): [Tag]
  currentUser: Viewer
  feed(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
    slug: String!
  ): Feed

  # Fetches an object given its ID.
  node(
    # ID of the object.
    id: ID!
  ): Node

  # Fetches a list of objects given a list of IDs.
  nodes(
    # IDs of the objects.
    ids: [ID!]!
  ): [Node]!
  products(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
    id: [ID]
    search: String
    slug: String
    brand: [ID]
    tag: [ID]
    order: Order
  ): ProductConnection
  reviews(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
    id: [ID]
    product: [ID]
    order: Order
  ): ReviewConnectionType
  sluggable(slug: String!, types: [SluggableEnum]!): SluggableUnion
  tags(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
    id: [ID]
    slug: String
  ): TagConnection
}

type Reaction implements Node {
  id: ID!
  reaction_group: ReactionGroup!
  user: User!
}

# The connection type for Reaction.
type ReactionConnection {
  # A list of edges.
  edges: [ReactionEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type ReactionContainer implements Node {
  group(value: String!): ReactionGroup
  groups(values: [String]): [ReactionGroup]
  id: ID!
  values(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
  ): ReactionConnection
}

# An edge in a connection.
type ReactionEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Reaction
}

type ReactionGroup implements Node {
  count: Int!
  id: ID!
  reactions(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
  ): ReactionConnection
  value: String!
}

enum ReclineAppearance {
  # None
  NONE

  # String
  STRING

  # Text
  TEXT

  # Markdown
  MARKDOWN

  # Url
  URL

  # Email
  EMAIL

  # Number
  NUMBER

  # Select
  SELECT

  # Date
  DATE

  # Time
  TIME

  # Datetime
  DATETIME

  # Color
  COLOR

  # Toggle
  TOGGLE

  # Range
  RANGE

  # Tel
  TEL

  # Dropdown
  DROPDOWN

  # Rating
  RATING

  # Radio
  RADIO

  # Checkbox
  CHECKBOX

  # Location
  LOCATION

  # Media
  MEDIA

  # Link
  LINK

  # Reference
  REFERENCE
}

type ReclineAttribute {
  appearance: ReclineAppearance
  field_name: String!
  name: String!
  read_only: Boolean
  validate(int: Int, str: String, float: Float, bool: Boolean): ActiveReflectionValidation
  validators: [ActiveReflectionValidator]
}

interface ReclineInterface {
  # Fetch the content model for the given object.
  _model: ReclineModel
}

type ReclineModel {
  attributes: [ReclineAttribute]
  createdAt: String
  primaryKey: String
  updatedAt: String
  versions: [ReclineVersion]
}

union ReclineModelUnion = Article | Collection | User

type ReclineValue {
  attribute: String
  boolValue: Boolean
  floatValue: Float
  intValue: Int
  stringValue: String
  type: String
}

type ReclineVersion implements Node {
  createdAt: String
  event: String!
  id: ID!
  object: [ReclineValue]
  object_changes: [ReclineValue]
  versionAuthorID: String
}

type Review implements Node {
  created_at: String!
  id: ID!
  images(version: String = "original"): [Image]
  product: Product!
  rating: Int!
  reactions: ReactionContainer
  text: String!
  user: User!
}

# The connection type for Review.
type ReviewConnectionType {
  # A list of edges.
  edges: [ReviewEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

# An edge in a connection.
type ReviewEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Review
}

enum SluggableEnum {
  # Articles
  ARTICLE

  # Products
  PRODUCT

  # Tags
  TAG

  # Users
  USER
}

union SluggableUnion = Article | Product | Tag | User

type Tag implements Node {
  articles(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
    order: Order
  ): ArticleConnection
  children: [Tag]
  description: String
  displayName: String!
  id: ID!
  image: ImageAttachment
  isCategory: Boolean!
  products(
    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the last _n_ elements from the list.
    last: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String
    scopes: [ProductScope]
    order: Order
  ): ProductConnection
  slug: String!
}

# The connection type for Tag.
type TagConnection {
  # A list of edges.
  edges: [TagEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type TagEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Tag
}

enum TagScope {
  # Root
  ROOT

  # Categories
  CATEGORIES

  # Most_poular
  MOST_POULAR
}

type TextEntry implements Node {
  contents: String!
  id: ID!
  title: String
}

# Autogenerated input type of UpdateModel
input UpdateModelInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  nodeID: ID!
  fields: Hash!
}

# Autogenerated return type of UpdateModel
type UpdateModelPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  model: ReclineModelUnion
}

type User implements Node {
  avatar: ImageAttachment
  byline: String
  id: ID!
  name: String!
  slug: String!
  url: String!
}

# Node for objects through the viewing scope of the current user.
type Viewer implements Node {
  avatar(version: String = "original"): Image
  byline: String
  id: ID!
  name: String!
  role: String
  slug: String!
  url: String!
}
